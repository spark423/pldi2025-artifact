/*This is the template for the expf function generated using the original RLIBM approach. */

#include "libm.h"

double rlibm_expf(float x) {
  float_x fx = {.f=x};
  if((fx.x & 0x7FFFFFFF) == 0) return 1.0;
  if(fx.x <= 0x33ffffff) {
    if(fx.x <= 0x337fffff) return 0x1.0000008p+0;
    return 0x1.0000018p+0;
  }
  if(fx.x >= 0x42b17218 && fx.x <= 0xb3800000) {
    if(fx.x < 0x80000000) {
      if(fx.x < 0x7f800000) return 0x1.ffffff8p+127;
      if(fx.x == 0x7f800000) return 1.0/0.0;
      return 0.0/0.0;
    }
    if(fx.x <= 0xb3000000) return 0x1.ffffff8p-1;
    return 0x1.fffffe8p-1;
  }
  if(fx.x >= 0xc2cff1b5) {
    if(fx.x == 0xff800000) return 0.0;
    if(fx.x < 0xff800000) return 0x1p-151;
    else return 0.0/0.0;
  }
  double xp = x*LGEX64; 
  int N = (int)xp;
  int N2 = N % 64;
  if(N2<0) N2 += 64;
  int N1 = N-N2;
  int M = N1/64;
  int J = N2;
  double R = __builtin_fma(-N, ONEBY64LGE, x);
  double y = 0.0;
  if (R < -0x1.9e76dcp-24) {
      /* The contents of exp_rlibm_p1 go here */
      double coeffs[5] = {// Add the coeffecients of the final polynomial here, from lowest term to higheset */};
      double R2 = R*R;
      double tmp1 = coeffs[1]*R+coeffs[0];
      double tmp2 = coeffs[3]*R+coeffs[2];
      double tmp3 = coeffs[4]*R2+tmp2;
      y = tmp3*R2+tmp1;
  } else {
      /* The contents of exp_rlibm_p2 go here */
      double coeffs[5] = {// Add the coeffecients of the final polynomial here, from lowest term to higheset */};
      double R2 = R*R;
      double tmp1 = coeffs[1]*R+coeffs[0];
      double tmp2 = coeffs[3]*R+coeffs[2];
      double tmp3 = coeffs[4]*R2+tmp2;
      y = tmp3*R2+tmp1;
  }
  double_x ret = {.d=exp2JBy64[J]};
  ret.x += ((uint64_t)M << 52);
  y *= ret.d;
  return y;
}
